// This file is generated by scripts/generate-ast-to-buffer.ts.
// Do not edit this file directly.

import type { ast } from '../rollup/types';

export type NodeSerializer<T extends ast.AstNode> = (
	node: T,
	buffer: Uint32Array,
	position: number
) => [buffer: Uint32Array, position: number];

export const serializeDirective: NodeSerializer<ast.Directive> = (node, buffer, position) => {
	buffer[position] = 21;
	buffer[position + 1] = node.start;
	buffer[position + 2] = node.end;
	return [buffer, position + 3];
};

export const serializeExpressionStatement: NodeSerializer<ast.ExpressionStatement> = (
	node,
	buffer,
	position
) => {
	buffer[position] = 28;
	buffer[position + 1] = node.start;
	buffer[position + 2] = node.end;
	return [buffer, position + 3];
};

export const serializeLiteralBigInt: NodeSerializer<ast.LiteralBigInt> = (
	node,
	buffer,
	position
) => {
	buffer[position] = 58;
	buffer[position + 1] = node.start;
	buffer[position + 2] = node.end;
	return [buffer, position + 3];
};

export const serializeLiteralBoolean: NodeSerializer<ast.LiteralBoolean> = (
	node,
	buffer,
	position
) => {
	buffer[position] = 59;
	buffer[position + 1] = node.start;
	buffer[position + 2] = node.end;
	return [buffer, position + 3];
};

export const serializeLiteralNull: NodeSerializer<ast.LiteralNull> = (node, buffer, position) => {
	buffer[position] = 60;
	buffer[position + 1] = node.start;
	buffer[position + 2] = node.end;
	return [buffer, position + 3];
};

export const serializeLiteralNumber: NodeSerializer<ast.LiteralNumber> = (
	node,
	buffer,
	position
) => {
	buffer[position] = 61;
	buffer[position + 1] = node.start;
	buffer[position + 2] = node.end;
	return [buffer, position + 3];
};

export const serializeLiteralRegExp: NodeSerializer<ast.LiteralRegExp> = (
	node,
	buffer,
	position
) => {
	buffer[position] = 62;
	buffer[position + 1] = node.start;
	buffer[position + 2] = node.end;
	return [buffer, position + 3];
};

export const serializeLiteralString: NodeSerializer<ast.LiteralString> = (
	node,
	buffer,
	position
) => {
	buffer[position] = 63;
	buffer[position + 1] = node.start;
	buffer[position + 2] = node.end;
	return [buffer, position + 3];
};
